//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace API.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class dbLigaFantasiaEntities : DbContext
    {
        public dbLigaFantasiaEntities()
            : base("name=dbLigaFantasiaEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<LFTAudit> LFTAudit { get; set; }
        public virtual DbSet<LFTCategoriaJugador> LFTCategoriaJugador { get; set; }
        public virtual DbSet<LFTEquipoRonda> LFTEquipoRonda { get; set; }
        public virtual DbSet<LFTEstadoRonda> LFTEstadoRonda { get; set; }
        public virtual DbSet<LFTInstitucion> LFTInstitucion { get; set; }
        public virtual DbSet<LFTJugador> LFTJugador { get; set; }
        public virtual DbSet<LFTJugadorLiga> LFTJugadorLiga { get; set; }
        public virtual DbSet<LFTLiga> LFTLiga { get; set; }
        public virtual DbSet<LFTMetricaCategoria> LFTMetricaCategoria { get; set; }
        public virtual DbSet<LFTMiembroEquipoLiga> LFTMiembroEquipoLiga { get; set; }
        public virtual DbSet<LFTPermiso> LFTPermiso { get; set; }
        public virtual DbSet<LFTResultadoRonda> LFTResultadoRonda { get; set; }
        public virtual DbSet<LFTRolPermiso> LFTRolPermiso { get; set; }
        public virtual DbSet<LFTRolUsuario> LFTRolUsuario { get; set; }
        public virtual DbSet<LFTRondaLiga> LFTRondaLiga { get; set; }
        public virtual DbSet<LFTUsuario> LFTUsuario { get; set; }
        public virtual DbSet<LFTHistoriaPrecioRondaJugador> LFTHistoriaPrecioRondaJugador { get; set; }
        public virtual DbSet<ActiveDirectory> ActiveDirectory { get; set; }
        public virtual DbSet<LFTPlantillaCorreo> LFTPlantillaCorreo { get; set; }
        public virtual DbSet<LFTRol> LFTRol { get; set; }
    
        public virtual ObjectResult<LFPListarResultadoJugadorRonda_Result> LFPListarResultadoJugadorRonda(Nullable<int> pidRonda, Nullable<int> pidJugadorLiga)
        {
            var pidRondaParameter = pidRonda.HasValue ?
                new ObjectParameter("PidRonda", pidRonda) :
                new ObjectParameter("PidRonda", typeof(int));
    
            var pidJugadorLigaParameter = pidJugadorLiga.HasValue ?
                new ObjectParameter("PidJugadorLiga", pidJugadorLiga) :
                new ObjectParameter("PidJugadorLiga", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LFPListarResultadoJugadorRonda_Result>("LFPListarResultadoJugadorRonda", pidRondaParameter, pidJugadorLigaParameter);
        }
    
        public virtual ObjectResult<LFPLigasDisponiblesEntrenadorListar_Result> LFPLigasDisponiblesEntrenadorListar(Nullable<int> pIdInstitucion, Nullable<int> pCodigoUsuario, string pNombreLiga, Nullable<int> pActiva)
        {
            var pIdInstitucionParameter = pIdInstitucion.HasValue ?
                new ObjectParameter("PIdInstitucion", pIdInstitucion) :
                new ObjectParameter("PIdInstitucion", typeof(int));
    
            var pCodigoUsuarioParameter = pCodigoUsuario.HasValue ?
                new ObjectParameter("PCodigoUsuario", pCodigoUsuario) :
                new ObjectParameter("PCodigoUsuario", typeof(int));
    
            var pNombreLigaParameter = pNombreLiga != null ?
                new ObjectParameter("PNombreLiga", pNombreLiga) :
                new ObjectParameter("PNombreLiga", typeof(string));
    
            var pActivaParameter = pActiva.HasValue ?
                new ObjectParameter("PActiva", pActiva) :
                new ObjectParameter("PActiva", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LFPLigasDisponiblesEntrenadorListar_Result>("LFPLigasDisponiblesEntrenadorListar", pIdInstitucionParameter, pCodigoUsuarioParameter, pNombreLigaParameter, pActivaParameter);
        }
    
        public virtual ObjectResult<LFPTopDetalleResultadoJugadoresListar_Result> LFPTopDetalleResultadoJugadoresListar(Nullable<int> pIdJugadorLiga, Nullable<int> pIdRonda)
        {
            var pIdJugadorLigaParameter = pIdJugadorLiga.HasValue ?
                new ObjectParameter("PIdJugadorLiga", pIdJugadorLiga) :
                new ObjectParameter("PIdJugadorLiga", typeof(int));
    
            var pIdRondaParameter = pIdRonda.HasValue ?
                new ObjectParameter("PIdRonda", pIdRonda) :
                new ObjectParameter("PIdRonda", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LFPTopDetalleResultadoJugadoresListar_Result>("LFPTopDetalleResultadoJugadoresListar", pIdJugadorLigaParameter, pIdRondaParameter);
        }
    
        public virtual ObjectResult<LFPTopJugadoresListar_Result> LFPTopJugadoresListar(Nullable<int> pIdLiga, Nullable<int> pIdRonda, Nullable<int> pIdCategoria)
        {
            var pIdLigaParameter = pIdLiga.HasValue ?
                new ObjectParameter("PIdLiga", pIdLiga) :
                new ObjectParameter("PIdLiga", typeof(int));
    
            var pIdRondaParameter = pIdRonda.HasValue ?
                new ObjectParameter("PIdRonda", pIdRonda) :
                new ObjectParameter("PIdRonda", typeof(int));
    
            var pIdCategoriaParameter = pIdCategoria.HasValue ?
                new ObjectParameter("PIdCategoria", pIdCategoria) :
                new ObjectParameter("PIdCategoria", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LFPTopJugadoresListar_Result>("LFPTopJugadoresListar", pIdLigaParameter, pIdRondaParameter, pIdCategoriaParameter);
        }
    
        public virtual ObjectResult<LFPValidacionCierreRondaListar_Result> LFPValidacionCierreRondaListar(Nullable<int> pIdRondaLiga, Nullable<int> pIdLiga)
        {
            var pIdRondaLigaParameter = pIdRondaLiga.HasValue ?
                new ObjectParameter("PIdRondaLiga", pIdRondaLiga) :
                new ObjectParameter("PIdRondaLiga", typeof(int));
    
            var pIdLigaParameter = pIdLiga.HasValue ?
                new ObjectParameter("PIdLiga", pIdLiga) :
                new ObjectParameter("PIdLiga", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LFPValidacionCierreRondaListar_Result>("LFPValidacionCierreRondaListar", pIdRondaLigaParameter, pIdLigaParameter);
        }
    
        public virtual int LFPCerrarRonda(Nullable<int> pIdRonda, Nullable<int> pCodigoUsuarioOpera)
        {
            var pIdRondaParameter = pIdRonda.HasValue ?
                new ObjectParameter("PIdRonda", pIdRonda) :
                new ObjectParameter("PIdRonda", typeof(int));
    
            var pCodigoUsuarioOperaParameter = pCodigoUsuarioOpera.HasValue ?
                new ObjectParameter("PCodigoUsuarioOpera", pCodigoUsuarioOpera) :
                new ObjectParameter("PCodigoUsuarioOpera", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LFPCerrarRonda", pIdRondaParameter, pCodigoUsuarioOperaParameter);
        }
    }
}
